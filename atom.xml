<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zsirfs の个人小站</title>
  
  <subtitle>异于常人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.wangxdog.cn/"/>
  <updated>2018-04-19T05:39:49.182Z</updated>
  <id>https://blog.wangxdog.cn/</id>
  
  <author>
    <name>zsirfs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iphonex的适配</title>
    <link href="https://blog.wangxdog.cn/2018/04/19/iphonex%E7%9A%84%E9%80%82%E9%85%8D/"/>
    <id>https://blog.wangxdog.cn/2018/04/19/iphonex的适配/</id>
    <published>2018-04-19T11:48:04.000Z</published>
    <updated>2018-04-19T05:39:49.182Z</updated>
    
    <content type="html"><![CDATA[<p>iphonex 已经上线有一段时间了，作为业界刘海屏幕第一款机型，导致全屏不能正常的全屏显示了，，所以需要对<br>iphonx 适配，下面就详细说说如何适配</p><a id="more"></a><p>先看一张适配前后的图: <a href="http://ojgquc007.bkt.clouddn.com/dragon-qiniu/1524115029816.jpg" target="_blank" rel="noopener"></a><br><a href="http://ojgquc007.bkt.clouddn.com/dragon-qiniu/1524114909262.jpg" target="_blank" rel="noopener"></a></p><h2 id="iphonex-提供的-meta-头"><a href="#iphonex-提供的-meta-头" class="headerlink" title="iphonex 提供的 meta 头"></a>iphonex 提供的 meta 头</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"viewport-fit=contain"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"viewport-fit=cover"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"viewport-fit=auto"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="contain"><a href="#contain" class="headerlink" title="contain"></a>contain</h3><p>可视化窗口完全包含网页内容</p><h3 id="cover"><a href="#cover" class="headerlink" title="cover"></a>cover</h3><p>网页内容完全覆盖</p><h3 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h3><p>默认值和 contain 一样</p><p>详细见下图(无耻盗图): <a href="http://ojgquc007.bkt.clouddn.com/dragon-qiniu/1524114553748.jpg" target="_blank" rel="noopener"></a></p><blockquote><p>注意：网页默认不添加扩展的表现是 viewport-fit=contain，需要适配 iPhoneX 必须设置<br>viewport-fit=cover，这是适配的关键步骤。</p></blockquote><h2 id="ios11-增加新特性，webkit-的-css-函数"><a href="#ios11-增加新特性，webkit-的-css-函数" class="headerlink" title="ios11 增加新特性，webkit 的 css 函数"></a>ios11 增加新特性，webkit 的 css 函数</h2><p>为了应对刘海屏幕，苹果也给出了响应的策略</p><h3 id="css-预定义变量"><a href="#css-预定义变量" class="headerlink" title="css 预定义变量"></a>css 预定义变量</h3><p>四个预定义变量为设定安全区域和边界的距离，如下:</p><ul><li>safe-area-inset-left：安全区域距离左边边界距离</li><li>safe-area-inset-right：安全区域距离右边边界距离</li><li>safe-area-inset-top：安全区域距离顶部边界距离</li><li>safe-area-inset-bottom：安全区域距离底部边界距离</li></ul><h4 id="safe-area-inset-left"><a href="#safe-area-inset-left" class="headerlink" title="safe-area-inset-left"></a>safe-area-inset-left</h4><p>一般情况下是 0</p><h4 id="safe-area-inset-right"><a href="#safe-area-inset-right" class="headerlink" title="safe-area-inset-right"></a>safe-area-inset-right</h4><p>一般情况下是 0</p><h4 id="safe-area-inset-top"><a href="#safe-area-inset-top" class="headerlink" title="safe-area-inset-top"></a>safe-area-inset-top</h4><p>在刘海全屏的时候 top 为 <code>44px</code></p><h4 id="safe-area-inset-bottom"><a href="#safe-area-inset-bottom" class="headerlink" title="safe-area-inset-bottom"></a>safe-area-inset-bottom</h4><p>刘海全屏的条件下是 <code>34px</code></p><h3 id="css-函数-env-和-constant"><a href="#css-函数-env-和-constant" class="headerlink" title="css 函数 env() 和 constant()"></a>css 函数 env() 和 constant()</h3><p>这两个函数都是 webkit 中 css 函数，可以直接使用变量函数，只有在 webkit 内核下才支持</p><h4 id="env-函数"><a href="#env-函数" class="headerlink" title="env 函数"></a>env 函数</h4><p>必须在 ios &gt;= 11.2 才支持</p><h4 id="constant-函数"><a href="#constant-函数" class="headerlink" title="constant 函数"></a>constant 函数</h4><p>必须 ios &lt; 11.2 支持</p><blockquote><p>The env() function shipped in iOS 11 with the name constant(). Beginning with Safari Technology<br>Preview 41 and the iOS 11.2 beta, constant() has been removed and replaced with env(). You can use<br>the CSS fallback mechanism to support both versions, if necessary, but should prefer env() going<br>forward.</p></blockquote><h4 id="兼容前后版本代码"><a href="#兼容前后版本代码" class="headerlink" title="兼容前后版本代码"></a>兼容前后版本代码</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">padding-top</span>: <span class="selector-tag">constant</span>(<span class="selector-tag">safe-area-inset-top</span>);</span><br><span class="line"><span class="selector-tag">padding-top</span>: <span class="selector-tag">env</span>(<span class="selector-tag">safe-area-inset-top</span>);</span><br></pre></td></tr></table></figure><p>看下图: <a href="http://ojgquc007.bkt.clouddn.com/dragon-qiniu/1524115956774.jpg" target="_blank" rel="noopener"></a></p><h3 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h3><p>下面写的是 scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.phonex</span> &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: constant(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-top</span>: env(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-left</span>: constant(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-left</span>: env(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: constant(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: env(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: constant(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: env(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整检测代码"><a href="#完整检测代码" class="headerlink" title="完整检测代码"></a>完整检测代码</h2><h3 id="supports-隔离兼容模式"><a href="#supports-隔离兼容模式" class="headerlink" title="@supports 隔离兼容模式"></a>@supports 隔离兼容模式</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> iphonex-css &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: constant(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-top</span>: env(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-left</span>: constant(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-left</span>: env(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: constant(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: env(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: constant(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: env(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">mixin</span> iphonex-support &#123;</span><br><span class="line">  @supports (bottom: constant(safe-area-inset-top)) or (bottom: env(safe-area-inset-top)) &#123;</span><br><span class="line">    <span class="selector-tag">body</span><span class="selector-class">.iphonex</span> &#123;</span><br><span class="line">      @<span class="keyword">include</span> iphonex-css;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-media-媒体查询"><a href="#使用-media-媒体查询" class="headerlink" title="使用@media 媒体查询"></a>使用@media 媒体查询</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> iphonex-css &#123;</span><br><span class="line">  <span class="attribute">padding-top</span>: constant(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-top</span>: env(safe-area-inset-top); <span class="comment">//为导航栏+状态栏的高度 88px</span></span><br><span class="line">  <span class="attribute">padding-left</span>: constant(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-left</span>: env(safe-area-inset-left); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: constant(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-right</span>: env(safe-area-inset-right); <span class="comment">//如果未竖屏时为0</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: constant(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">  <span class="attribute">padding-bottom</span>: env(safe-area-inset-bottom); <span class="comment">//为底下圆弧的高度 34px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// iphonex 适配</span></span><br><span class="line">@<span class="keyword">mixin</span> iphonex-media &#123;</span><br><span class="line">  @<span class="keyword">media</span> only screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) &#123;</span><br><span class="line">    <span class="selector-tag">body</span><span class="selector-class">.iphonex</span> &#123;</span><br><span class="line">      @<span class="keyword">include</span> iphonex-css;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>env 和 constant 只有在 viewport-fit=cover 时候才能生效, 上面使用的safari 的控制台可以检测模拟器中网页开启web inspector.</p><blockquote><p><a href="https://webkit.org/blog/7929/designing-websites-for-iphone-x/?hmsr=funteas.com&amp;utm_medium=funteas.com&amp;utm_source=funteas.com" target="_blank" rel="noopener">https://webkit.org/blog/7929/designing-websites-for-iphone-x/?hmsr=funteas.com&amp;utm_medium=funteas.com&amp;utm_source=funteas.com</a> &gt;<br><a href="https://aotu.io/notes/2017/11/27/iphonex/index.html" target="_blank" rel="noopener">https://aotu.io/notes/2017/11/27/iphonex/index.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&quot;iphonex的适配&quot;&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git问题集合</title>
    <link href="https://blog.wangxdog.cn/2018/03/08/git%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"/>
    <id>https://blog.wangxdog.cn/2018/03/08/git问题集合/</id>
    <published>2018-03-08T15:16:07.000Z</published>
    <updated>2018-04-19T05:39:49.178Z</updated>
    
    <content type="html"><![CDATA[<p>git 是现在最火的的代码管理工具，一般我们提交代码到 GitHub、码云、gitlab 之类的代码仓库，会有很多操作<br>git 的方法。同时也会出现很多问题，所以需要总结一下 git 发现的问题。</p><a id="more"></a><h2 id="sourceTree-直接点击旧的版本号"><a href="#sourceTree-直接点击旧的版本号" class="headerlink" title="sourceTree 直接点击旧的版本号"></a>sourceTree 直接点击旧的版本号</h2><p>先上图:</p><p><img src="http://p4lzwh1mv.bkt.clouddn.com/dragon-qiniu/1520850313014.jpg" alt=""></p><p>这样，这里如果放弃本地修改就该导致你修改的代码直接 gg，我们直接切换到这个副本以后，修改完成以后按照<br>正常命令提交以后，直接没见了。</p><p>这个时候需要使用到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><p>然后这里就出现了这个:</p><p><img src="http://p4lzwh1mv.bkt.clouddn.com/dragon-qiniu/1520850608943.jpg" alt=""></p><p>红线区域就是 git 的后 8 位 hash 值，只需要找到这个，然后这个操作:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b new-branch 6c5816c8</span><br></pre></td></tr></table></figure><p>然后就重新建立一个分支，并且你修改提交内容就回来了。<code>very good</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git 是现在最火的的代码管理工具，一般我们提交代码到 GitHub、码云、gitlab 之类的代码仓库，会有很多操作&lt;br&gt;git 的方法。同时也会出现很多问题，所以需要总结一下 git 发现的问题。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>macos启动程序增加参数</title>
    <link href="https://blog.wangxdog.cn/2018/03/02/macos%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F%E5%A2%9E%E5%8A%A0%E5%8F%82%E6%95%B0/"/>
    <id>https://blog.wangxdog.cn/2018/03/02/macos启动程序增加参数/</id>
    <published>2018-03-02T14:22:50.000Z</published>
    <updated>2018-04-19T05:39:49.182Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近使用 vscode 中的插件<code>debugger for chrome</code> 这个牛逼的调试 js 的插件，然后呢，每次需要在控制台<br>启动 chrome 然后增加参数<code>--remote-debugging-port=9222</code>这段代码，每次启动，很烦人呢，然后去 google 一<br>下。谁知道网上都是一毛一样的，然后一毛一样的不能启动，直接报错，后来，然后我就发现了，都特么有问题，<br>使用<code>ls -al</code>已查看全都是不靠谱，用户根本没有执行命令嘛，下面查看正确打开方式</p><a id="more"></a><h2 id="打开应用目录"><a href="#打开应用目录" class="headerlink" title="打开应用目录"></a>打开应用目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Applications/Google Chrome.app/Contents/MacOS</span><br></pre></td></tr></table></figure><h2 id="使用sudo-命令，新建脚本"><a href="#使用sudo-命令，新建脚本" class="headerlink" title="使用sudo 命令，新建脚本"></a>使用sudo 命令，新建脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv Google\ Chrome Google.real</span><br><span class="line">$ sudo vim Goolge\ Chrome</span><br></pre></td></tr></table></figure><p>复制这段命令进去:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;/Applications/Google Chrome.app/Contents/MacOS/Google.real&quot; --user-data-dir --remote-debugging-port=9222</span><br></pre></td></tr></table></figure><h2 id="给-Google-Chrome-脚本增加运行命令"><a href="#给-Google-Chrome-脚本增加运行命令" class="headerlink" title="给 Google Chrome 脚本增加运行命令"></a>给 Google Chrome 脚本增加运行命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod a+x Google\ Chrome</span><br></pre></td></tr></table></figure><p>然后就可以快乐的启动Google 浏览器，然后带上调试命令了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近使用 vscode 中的插件&lt;code&gt;debugger for chrome&lt;/code&gt; 这个牛逼的调试 js 的插件，然后呢，每次需要在控制台&lt;br&gt;启动 chrome 然后增加参数&lt;code&gt;--remote-debugging-port=9222&lt;/code&gt;这段代码，每次启动，很烦人呢，然后去 google 一&lt;br&gt;下。谁知道网上都是一毛一样的，然后一毛一样的不能启动，直接报错，后来，然后我就发现了，都特么有问题，&lt;br&gt;使用&lt;code&gt;ls -al&lt;/code&gt;已查看全都是不靠谱，用户根本没有执行命令嘛，下面查看正确打开方式&lt;/p&gt;
    
    </summary>
    
      <category term="utils" scheme="https://blog.wangxdog.cn/categories/utils/"/>
    
    
      <category term="os" scheme="https://blog.wangxdog.cn/tags/os/"/>
    
      <category term="macos" scheme="https://blog.wangxdog.cn/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>npm安装sass,phantomjs,electron等失败</title>
    <link href="https://blog.wangxdog.cn/2018/01/27/npm%E5%AE%89%E8%A3%85sass-phantomjs-electron%E7%AD%89%E5%A4%B1%E8%B4%A5/"/>
    <id>https://blog.wangxdog.cn/2018/01/27/npm安装sass-phantomjs-electron等失败/</id>
    <published>2018-01-27T14:13:47.000Z</published>
    <updated>2018-04-19T05:39:49.182Z</updated>
    
    <content type="html"><![CDATA[<p>安装 npm 总会失败，比如安装<code>node-sass</code>, <code>phantomjs</code>, <code>electron</code>,还有 <code>nvm</code>等等，这些都要请求国外的，很显然很多时候，我们是安装失败的，经常会链接失败，遇到 npm 安装时候连接超时的问题，需要来解决这个问题就需要配置国内的开源的镜像，比如<a href="https://npm.taobao.org/mirrors" target="_blank" rel="noopener">taobao npm</a></p><a id="more"></a><h2 id="macos-或者-unix-用户"><a href="#macos-或者-unix-用户" class="headerlink" title="macos 或者 unix 用户"></a>macos 或者 unix 用户</h2><p>通过 npm 文档查询得到，可以在用户目录通过配置<code>.npmrc</code>文件来配置用户配置，因此，只需要在用户目录下修改配置文件(不存在就自己创建)</p><p>然后写入下面脚本:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nvm</span></span><br><span class="line">nvm_nodejs_org_mirror=http://npm.taobao.org/mirrors/node</span><br><span class="line"><span class="comment"># phantomjs</span></span><br><span class="line">phantomjs_cdnurl=http://npm.taobao.org/mirrors/phantomjs</span><br><span class="line"><span class="comment"># chromedriver</span></span><br><span class="line">chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver</span><br><span class="line"><span class="comment"># operadriver</span></span><br><span class="line">operadriver_cdnurl=http://npm.taobao.org/mirrors/operadriver</span><br><span class="line"><span class="comment"># electron</span></span><br><span class="line">electron_mirror=http://npm.taobao.org/mirrors/electron/</span><br><span class="line"><span class="comment"># node-sass</span></span><br><span class="line">sass_binary_site=http://npm.taobao.org/mirrors/node-sass</span><br><span class="line"><span class="comment"># sqlite3</span></span><br><span class="line">sqlite3_binary_site=http://npm.taobao.org/mirrors/sqlite3</span><br></pre></td></tr></table></figure><h3 id="安装-electron-rebuild"><a href="#安装-electron-rebuild" class="headerlink" title="安装 electron-rebuild"></a>安装 electron-rebuild</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ electron-rebuild -d=http://npm.taobao.org/mirrors/atom-shell</span><br><span class="line">$ electron-rebuild -d=http://npm.taobao.org/mirrors/atom-shell -f -w <span class="variable">$module_with_c</span>++_code</span><br></pre></td></tr></table></figure><h3 id="安装-nvmw"><a href="#安装-nvmw" class="headerlink" title="安装 nvmw"></a>安装 nvmw</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">set</span> <span class="string">"NVMW_NODEJS_ORG_MIRROR=http://npm.taobao.org/mirrors/node"</span></span><br><span class="line">$ <span class="built_in">set</span> <span class="string">"NVMW_IOJS_ORG_MIRROR=http://npm.taobao.org/mirrors/iojs"</span></span><br><span class="line">$ <span class="built_in">set</span> <span class="string">"NVMW_NPM_MIRROR=http://npm.taobao.org/mirrors/npm"</span></span><br><span class="line">$ nvmw install node-v0.12.2</span><br><span class="line">$ nvmw install iojs-v1.6.3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装 npm 总会失败，比如安装&lt;code&gt;node-sass&lt;/code&gt;, &lt;code&gt;phantomjs&lt;/code&gt;, &lt;code&gt;electron&lt;/code&gt;,还有 &lt;code&gt;nvm&lt;/code&gt;等等，这些都要请求国外的，很显然很多时候，我们是安装失败的，经常会链接失败，遇到 npm 安装时候连接超时的问题，需要来解决这个问题就需要配置国内的开源的镜像，比如&lt;a href=&quot;https://npm.taobao.org/mirrors&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;taobao npm&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.wangxdog.cn/categories/javascript/"/>
    
      <category term="npm" scheme="https://blog.wangxdog.cn/categories/javascript/npm/"/>
    
      <category term="electron" scheme="https://blog.wangxdog.cn/categories/javascript/npm/electron/"/>
    
    
      <category term="nodejs" scheme="https://blog.wangxdog.cn/tags/nodejs/"/>
    
      <category term="npm" scheme="https://blog.wangxdog.cn/tags/npm/"/>
    
      <category term="sass" scheme="https://blog.wangxdog.cn/tags/sass/"/>
    
      <category term="phantomjs" scheme="https://blog.wangxdog.cn/tags/phantomjs/"/>
    
      <category term="electron" scheme="https://blog.wangxdog.cn/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>ajax之axios的使用</title>
    <link href="https://blog.wangxdog.cn/2018/01/24/ajax%E4%B9%8Baxios%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://blog.wangxdog.cn/2018/01/24/ajax之axios的使用/</id>
    <published>2018-01-24T13:59:07.000Z</published>
    <updated>2018-04-19T05:39:49.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>axios 是一个 Promise 的 ajax 库，同时支持浏览器和 nodejs 服务器，使用 axios 可以轻松的发送 GET/POST 请求,同时可以附加很多额外的功能，比如拦截器, 认证，代理，状态校验等</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>axios 的<a href="https://github.com/axios/axios" target="_blank" rel="noopener">GitHub 库</a>的地址,<a href="https://github.com/axios/axios" target="_blank" rel="noopener">点击这里</a></p></blockquote><p>使用 cnpm/npm/yarn 安装命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install axios <span class="comment"># 或者 cnpm install axios</span></span><br></pre></td></tr></table></figure><p>兼容性:<br><a href="/ajax之axios的使用/compatibility.png"></a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="首先查看-API"><a href="#首先查看-API" class="headerlink" title="首先查看 API"></a>首先查看 API</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">axios.request(config)</span><br><span class="line">axios.get(url[, config])</span><br><span class="line">axios.delete(url[, config])</span><br><span class="line">axios.head(url[, config])</span><br><span class="line">axios.options(url[, config])</span><br><span class="line">axios.post(url[, data[, config]])</span><br><span class="line">axios.put(url[, data[, config]])</span><br><span class="line">axios.patch(url[, data[, config]])</span><br></pre></td></tr></table></figure><p>除了<code>request</code>方法外，其余第二个阐述均为<code>config</code></p><h3 id="config-对象说明"><a href="#config-对象说明" class="headerlink" title="config 对象说明"></a>config 对象说明</h3><p>发送一个请求，在 config 中写出请求体, <code>config</code> 内容是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 请求地址</span></span><br><span class="line">  url: <span class="string">'/api/xxx'</span>,</span><br><span class="line">  <span class="comment">// 请求方法, 默认是Get</span></span><br><span class="line">  method: <span class="string">'get'</span>,</span><br><span class="line">  <span class="comment">// baseURL就是把这个url添加到url之前，最终的请求url为: url + baseURL, 可以在axios.default.baseURL='http://xxxx'设置</span></span><br><span class="line">  baseURL: <span class="string">'https://some-domain.com/api/'</span>,</span><br><span class="line">  <span class="comment">// 这个是用在请求体可以进行转换，接受一个数组，数组中每个值都是一个回调函数,只有在PUT, POST, PATCH中使用</span></span><br><span class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data, headers</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 其他操作</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 返回时转换返回体转换, 使用then/catch 会把这个data回调传递</span></span><br><span class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 其他操作</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="comment">// 请求头</span></span><br><span class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</span><br><span class="line">  <span class="comment">// 请求的数据，params 必须是一个自然的对象</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    ID: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// `paramsSerializer` is an optional function in charge of serializing `params`</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  <span class="comment">// 请求参数序列化</span></span><br><span class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Only applicable for request methods 'PUT', 'POST', and 'PATCH'</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - Browser only: FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node only: Stream, Buffer</span></span><br><span class="line">  <span class="comment">// 在PUT/POST/PATCH方式下，传递的请求数据</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Fred'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果超过1000 没有响应则请求超时</span></span><br><span class="line">  timeout: <span class="number">1000</span>,</span><br><span class="line">  <span class="comment">// `withCredentials` indicates whether or not cross-site Access-Control requests</span></span><br><span class="line">  <span class="comment">// should be made using credentials</span></span><br><span class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `adapter` allows custom handling of requests which makes testing easier.</span></span><br><span class="line">  <span class="comment">// Return a promise and supply a valid response (see lib/adapters/README.md).</span></span><br><span class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` indicates that HTTP Basic auth should be used, and supplies credentials.</span></span><br><span class="line">  <span class="comment">// This will set an `Authorization` header, overwriting any existing</span></span><br><span class="line">  <span class="comment">// `Authorization` custom headers you have set using `headers`.</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    username: <span class="string">'janedoe'</span>,</span><br><span class="line">    password: <span class="string">'s00pers3cret'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// `responseType` indicates the type of data that the server will respond with</span></span><br><span class="line">  <span class="comment">// options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></span><br><span class="line">  responseType: <span class="string">'json'</span>, <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `xsrfCookieName` is the name of the cookie to use as a value for xsrf token</span></span><br><span class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span></span><br><span class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `onUploadProgress` allows handling of progress events for uploads</span></span><br><span class="line">  <span class="comment">// 上传进度回调</span></span><br><span class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// `onDownloadProgress` allows handling of progress events for downloads</span></span><br><span class="line">  <span class="comment">// 下载进度回调</span></span><br><span class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// `maxContentLength` defines the max size of the http response content allowed</span></span><br><span class="line">  <span class="comment">// 最大响应内容长度</span></span><br><span class="line">  maxContentLength: <span class="number">2000</span>,</span><br><span class="line">  <span class="comment">// `validateStatus` defines whether to resolve or reject the promise for a given</span></span><br><span class="line">  <span class="comment">// HTTP response status code. If `validateStatus` returns `true` (or is set to `null`</span></span><br><span class="line">  <span class="comment">// or `undefined`), the promise will be resolved; otherwise, the promise will be</span></span><br><span class="line">  <span class="comment">// rejected.</span></span><br><span class="line">  <span class="comment">// 校验请求状态码 大于200 小于300 在Promise中使用then否则就catch</span></span><br><span class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// `maxRedirects` defines the maximum number of redirects to follow in node.js.</span></span><br><span class="line">  <span class="comment">// If set to 0, no redirects will be followed.</span></span><br><span class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">// default</span></span><br><span class="line">  <span class="comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span></span><br><span class="line">  <span class="comment">// and https requests, respectively, in node.js. This allows options to be added like</span></span><br><span class="line">  <span class="comment">// `keepAlive` that are not enabled by default.</span></span><br><span class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  httpsAgent: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 'proxy' defines the hostname and port of the proxy server</span></span><br><span class="line">  <span class="comment">// Use `false` to disable proxies, ignoring environment variables.</span></span><br><span class="line">  <span class="comment">// `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and</span></span><br><span class="line">  <span class="comment">// supplies credentials.</span></span><br><span class="line">  <span class="comment">// This will set an `Proxy-Authorization` header, overwriting any existing</span></span><br><span class="line">  <span class="comment">// `Proxy-Authorization` custom headers you have set using `headers`.</span></span><br><span class="line">  <span class="comment">// 代理配置</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="number">9000</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      username: <span class="string">'mikeymike'</span>,</span><br><span class="line">      password: <span class="string">'rapunz3l'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// `cancelToken` specifies a cancel token that can be used to cancel the request</span></span><br><span class="line">  <span class="comment">// (see Cancellation section below for details)</span></span><br><span class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="responseSchema-对象"><a href="#responseSchema-对象" class="headerlink" title="responseSchema 对象"></a>responseSchema 对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 服务器返回的数据</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line">  <span class="comment">// 返回的状态文本</span></span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line">  <span class="comment">// 服务器返回头， 所有的返回头都是小写字母</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 配置对象, 请求的config</span></span><br><span class="line">  config: &#123;&#125;,</span><br><span class="line">  <span class="comment">// nodejs环境下的ClientRequest对象，浏览器环境下的XMLHttpRequest对象</span></span><br><span class="line">  request: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发一个-GET、POST-请求"><a href="#发一个-GET、POST-请求" class="headerlink" title="发一个 GET、POST 请求"></a>发一个 GET、POST 请求</h3><p>一般情况下我们最常用的就是请求数据(GET), 保存/更新数据(POST), 上传文件(POST/设置头部), 下面使用两个示例来说明:</p><h4 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求:"></a>GET 请求:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axiso <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">axios</span><br><span class="line">  .get(<span class="string">'http://xxxx/v1/query'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里返回的事responseSchema对象</span></span><br><span class="line">    <span class="keyword">return</span> config.data</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 这里才是返回体</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><a href="/ajax之axios的使用/get.png"></a></p><h4 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求:"></a>POST 请求:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">axois</span><br><span class="line">  .post(<span class="string">'http://xxxx/xxx'</span>, &#123;</span><br><span class="line">    type: <span class="string">'sb'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// responseSchema对象</span></span><br><span class="line">    <span class="keyword">return</span> config.data</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 返回的数据</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><a href="/ajax之axios的使用/post.png"></a></p><h2 id="请求-返回拦截器使用"><a href="#请求-返回拦截器使用" class="headerlink" title="请求/返回拦截器使用"></a>请求/返回拦截器使用</h2><p>axios 可以使用拦截器，对请求和返回拦截，定义多个拦截器将依次执行, 拦截器都挂载在<code>axios.interceptors</code>上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的都是默认的拦截器配置</span></span><br><span class="line"><span class="comment">// Add a request interceptor</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something before request is sent</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add a response interceptor</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response data</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with response error</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="axios-配置"><a href="#axios-配置" class="headerlink" title="axios 配置"></a>axios 配置</h2><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">'https://api.example.com'</span> <span class="comment">// 定义访问的基础url</span></span><br><span class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN <span class="comment">// 认证token</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span> <span class="comment">// 请求类型</span></span><br></pre></td></tr></table></figure><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>自定义配置的话需要构建一个 axios 实例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set config defaults when creating the instance</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://api.example.com'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// Alter defaults after instance has been created</span></span><br><span class="line">instance.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN</span><br></pre></td></tr></table></figure><p>配置的优先级，按照js执行顺序，后来的配置覆盖前面的配置</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>axios 是目前最好的ajax库之一，如果兼容IE9以上选择axios作为请求库是第一选择的，作为前端开发者，如果你发现的请求正确，传值正确，按照API文档操作正确，那就去(dui)后端(辣��后端)</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;axios 是一个 Promise 的 ajax 库，同时支持浏览器和 nodejs 服务器，使用 axios 可以轻松的发送 GET/POST 请求,同时可以附加很多额外的功能，比如拦截器, 认证，代理，状态校验等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.wangxdog.cn/categories/javascript/"/>
    
      <category term="http" scheme="https://blog.wangxdog.cn/categories/javascript/http/"/>
    
    
      <category term="axios" scheme="https://blog.wangxdog.cn/tags/axios/"/>
    
      <category term="ajax" scheme="https://blog.wangxdog.cn/tags/ajax/"/>
    
      <category term="http" scheme="https://blog.wangxdog.cn/tags/http/"/>
    
      <category term="javascript" scheme="https://blog.wangxdog.cn/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>html头部标签meta用法</title>
    <link href="https://blog.wangxdog.cn/2018/01/22/html%E5%A4%B4%E9%83%A8%E6%A0%87%E7%AD%BEmeta%E7%94%A8%E6%B3%95/"/>
    <id>https://blog.wangxdog.cn/2018/01/22/html头部标签meta用法/</id>
    <published>2018-01-22T17:10:19.000Z</published>
    <updated>2018-04-19T05:39:49.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近发现meta标签用处挺多，然后去查看了一下，故此下文</p></blockquote><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cmn-Hans"</span>&gt;</span> <span class="comment">&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">'utf-8'</span>&gt;</span> <span class="comment">&lt;!-- 声明文档使用的字符编码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span> <span class="comment">&lt;!-- 优先使用 IE 最新版本和 Chrome --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"不超过150个字符"</span> /&gt;</span> <span class="comment">&lt;!-- 页面描述 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">""</span>/&gt;</span> <span class="comment">&lt;!-- 页面关键词 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"name, email@gmail.com"</span> /&gt;</span> <span class="comment">&lt;!-- 网页作者 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span> /&gt;</span> <span class="comment">&lt;!-- 搜索引擎抓取 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 为移动设备添加 viewport --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> =<span class="string">"viewport"</span> <span class="attr">content</span> =<span class="string">"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no"</span>&gt;</span> <span class="comment">&lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 设备 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span> <span class="comment">&lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span> /&gt;</span> <span class="comment">&lt;!-- 是否启用 WebApp 全屏模式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black-translucent"</span> /&gt;</span> <span class="comment">&lt;!-- 设置状态栏的背景颜色，只有在 `"apple-mobile-web-app-capable" content="yes"` 时生效 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span> <span class="comment">&lt;!-- 禁止数字识自动别为电话号码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL"</span>&gt;</span> <span class="comment">&lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 图标 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-57x57-precomposed.png"</span> /&gt;</span> <span class="comment">&lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"114x114"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-114x114-precomposed.png"</span> /&gt;</span> <span class="comment">&lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon-precomposed"</span> <span class="attr">sizes</span>=<span class="string">"144x144"</span> <span class="attr">href</span>=<span class="string">"/apple-touch-icon-144x144-precomposed.png"</span> /&gt;</span> <span class="comment">&lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iOS 图标 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 启动画面 begin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"768x1004"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-768x1004.png"</span> /&gt;</span> <span class="comment">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1536x2008"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-1536x2008.png"</span> /&gt;</span> <span class="comment">&lt;!-- iPad 竖屏 1536x2008（Retina） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"1024x748"</span> <span class="attr">href</span>=<span class="string">"/Default-Portrait-1024x748.png"</span> /&gt;</span> <span class="comment">&lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"2048x1496"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-2048x1496.png"</span> /&gt;</span> <span class="comment">&lt;!-- iPad 横屏 2048x1496（Retina） --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-320x480.png"</span> /&gt;</span> <span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x960"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x960.png"</span> /&gt;</span> <span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">sizes</span>=<span class="string">"640x1136"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-640x1136.png"</span> /&gt;</span> <span class="comment">&lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- iOS 启动画面 end --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- iOS 设备 end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileColor"</span> <span class="attr">content</span>=<span class="string">"#000"</span>/&gt;</span> <span class="comment">&lt;!-- Windows 8 磁贴颜色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-TileImage"</span> <span class="attr">content</span>=<span class="string">"icon.png"</span>/&gt;</span> <span class="comment">&lt;!-- Windows 8 磁贴图标 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"RSS"</span> <span class="attr">href</span>=<span class="string">"/rss.xml"</span> /&gt;</span> <span class="comment">&lt;!-- 添加 RSS 订阅 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">type</span>=<span class="string">"image/ico"</span> <span class="attr">href</span>=<span class="string">"/favicon.ico"</span> /&gt;</span> <span class="comment">&lt;!-- 添加 favicon icon --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体就在上面注释中，哪里不足就告诉我哦。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近发现meta标签用处挺多，然后去查看了一下，故此下文&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="html" scheme="https://blog.wangxdog.cn/categories/html/"/>
    
    
      <category term="html" scheme="https://blog.wangxdog.cn/tags/html/"/>
    
      <category term="header-meta" scheme="https://blog.wangxdog.cn/tags/header-meta/"/>
    
  </entry>
  
  <entry>
    <title>化茧成蝶之vue(1)</title>
    <link href="https://blog.wangxdog.cn/2018/01/22/%E5%8C%96%E8%8C%A7%E6%88%90%E8%9D%B6%E4%B9%8Bvue/"/>
    <id>https://blog.wangxdog.cn/2018/01/22/化茧成蝶之vue/</id>
    <published>2018-01-22T16:29:54.000Z</published>
    <updated>2018-04-19T05:39:49.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前本来要来贡献自己的见解一直没时间，现在乘着大年期间来分享一波</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;vue 渐进式JavaScript 框架, GitHub雄霸6w多star，必须要学啊&lt;/blockquote&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://blog.wangxdog.cn/categories/javascript/"/>
    
      <category term="vue" scheme="https://blog.wangxdog.cn/categories/javascript/vue/"/>
    
    
      <category term="javascript" scheme="https://blog.wangxdog.cn/tags/javascript/"/>
    
      <category term="vue" scheme="https://blog.wangxdog.cn/tags/vue/"/>
    
      <category term="vuex" scheme="https://blog.wangxdog.cn/tags/vuex/"/>
    
      <category term="vue-router" scheme="https://blog.wangxdog.cn/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+next+travis部署Github博客</title>
    <link href="https://blog.wangxdog.cn/2018/01/18/%E4%BD%BF%E7%94%A8hexo-next-travis%E9%83%A8%E7%BD%B2Github%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.wangxdog.cn/2018/01/18/使用hexo-next-travis部署Github博客/</id>
    <published>2018-01-18T18:25:48.000Z</published>
    <updated>2018-04-19T05:39:49.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说明: GitHub Page 利用 GitHub 仓库来搭建静态博客，使用 travis 实现自动化部署，使用 next 主题让画面更炫酷,需要 nodejs 环境哦关于 next-theme 第三方服务，详细请看 next 主题使用</p></blockquote><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><h3 id="nodejs-和-npm-安装"><a href="#nodejs-和-npm-安装" class="headerlink" title="nodejs 和 npm 安装"></a>nodejs 和 npm 安装</h3><h3 id="安装-hexo-cli"><a href="#安装-hexo-cli" class="headerlink" title="安装 hexo-cli"></a>安装 hexo-cli</h3><h3 id="注册-Github"><a href="#注册-Github" class="headerlink" title="注册 Github"></a>注册 Github</h3><h3 id="注册-Travis-org"><a href="#注册-Travis-org" class="headerlink" title="注册 Travis.org"></a>注册 Travis.org</h3><h2 id="2-安装依赖-基本配置"><a href="#2-安装依赖-基本配置" class="headerlink" title="2. 安装依赖, 基本配置"></a>2. 安装依赖, 基本配置</h2><h3 id="安装-next-主题"><a href="#安装-next-主题" class="headerlink" title="安装 next 主题"></a>安装 next 主题</h3><h3 id="配置-next-主题"><a href="#配置-next-主题" class="headerlink" title="配置 next 主题"></a>配置 next 主题</h3><h3 id="配置-travis"><a href="#配置-travis" class="headerlink" title="配置 travis"></a>配置 travis</h3><h3 id="提交代码到-GitHub-分支-实现自动化"><a href="#提交代码到-GitHub-分支-实现自动化" class="headerlink" title="提交代码到 GitHub 分支, 实现自动化"></a>提交代码到 GitHub 分支, 实现自动化</h3><h2 id="3-自定义-hexo-博客"><a href="#3-自定义-hexo-博客" class="headerlink" title="3. 自定义 hexo 博客"></a>3. 自定义 hexo 博客</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过本次搭建自己 hexo 博客，打算将自己博客移动到这里，专心做一个技术分享博客，一方面总结自己所学习的东西，另外就是分享，相互学习，提高水平</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;使用hexo + next 主题搭建一个炫酷的GitHub Page 网站&lt;/blockquote&gt;
    
    </summary>
    
      <category term="tech" scheme="https://blog.wangxdog.cn/categories/tech/"/>
    
      <category term="nodejs" scheme="https://blog.wangxdog.cn/categories/tech/nodejs/"/>
    
    
      <category term="hexo" scheme="https://blog.wangxdog.cn/tags/hexo/"/>
    
      <category term="travis" scheme="https://blog.wangxdog.cn/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>Since chose the distance</title>
    <link href="https://blog.wangxdog.cn/2018/01/18/Since-chose-the-distance/"/>
    <id>https://blog.wangxdog.cn/2018/01/18/Since-chose-the-distance/</id>
    <published>2018-01-18T14:32:18.000Z</published>
    <updated>2018-04-19T05:39:49.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2013"><a href="#2013" class="headerlink" title="2013"></a>2013</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><p>我的2013 学习 <code>Hello World</code></p><h2 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><p>我的 2014 使用 <code>Java</code>学习Hello World</p><h2 id="2015"><a href="#2015" class="headerlink" title="2015"></a>2015</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><p>2015 用JS 写Hello World</p><h2 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Hello World"</span>)</span><br></pre></td></tr></table></figure><p>2016 用上了Python</p><h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...</span><br></pre></td></tr></table></figure><p>2017 已经过了</p><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> future = <span class="string">"Too good, too difficult to describe"</span></span><br><span class="line"><span class="keyword">const</span> everyDateIsGood = <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span>(everyDateIsGood) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(futer) <span class="comment">// 每一天都充满了喜感</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2018 从头再开…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;既然选择了远方，边只顾风雨兼程&lt;/blockquote&gt;
    
    </summary>
    
      <category term="life" scheme="https://blog.wangxdog.cn/categories/life/"/>
    
    
      <category term="感悟" scheme="https://blog.wangxdog.cn/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
